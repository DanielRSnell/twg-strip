---
// LoginForm.astro - Keycloak authentication component
const { 
  color = "#000", 
  hover = "#333", 
  logo = "/images/client/tamu-logo.png", 
  title = "Login Required"
} = Astro.props;
---

<div class="login-container">
  <div class="login-form">
    <div class="login-header">
      <img src={logo} alt="Logo" class="login-logo">
      <h2 class="login-title">{title}</h2>
      <p class="login-subtitle">Please sign in to continue</p>
    </div>
    
    <form id="login-form" class="login-form-content">
      <div class="form-group">
        <label for="username">Username</label>
        <input 
          type="email" 
          id="username" 
          name="username" 
          placeholder="Enter your email"
          required
        />
      </div>
      
      <div class="form-group">
        <label for="password">Password</label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          placeholder="Enter your password"
          required
        />
      </div>
      
      <button type="submit" class="login-button" id="login-btn">
        <span class="login-text">Sign In</span>
        <div class="login-spinner" style="display: none;">
          <div class="spinner-dot"></div>
          <div class="spinner-dot"></div>
          <div class="spinner-dot"></div>
        </div>
      </button>
      
      <div class="login-error" id="login-error" style="display: none;"></div>
    </form>
  </div>
</div>

<script define:vars={{ color, hover }}>
  class AuthManager {
    constructor() {
      this.keycloakEndpoint = 'https://keycloak.ai4jobs.com/realms/ssbx-tf/protocol/openid-connect/token';
      this.clientId = 'ssbx-web';
      this.scope = 'openid profile email';
    }

    async login(username, password) {
      const formData = new URLSearchParams();
      formData.append('grant_type', 'password');
      formData.append('client_id', this.clientId);
      formData.append('scope', this.scope);
      formData.append('username', username);
      formData.append('password', password);

      try {
        const response = await fetch(this.keycloakEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: formData
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error_description || 'Login failed');
        }

        const tokenData = await response.json();
        
        // Store tokens in localStorage
        localStorage.setItem('access_token', tokenData.access_token);
        localStorage.setItem('refresh_token', tokenData.refresh_token);
        localStorage.setItem('token_expires_at', Date.now() + (tokenData.expires_in * 1000));
        
        return tokenData;
      } catch (error) {
        console.error('Login error:', error);
        throw error;
      }
    }

    logout() {
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      localStorage.removeItem('token_expires_at');
      
      // Dispatch logout event
      window.dispatchEvent(new CustomEvent('authLogout'));
    }

    getToken() {
      const token = localStorage.getItem('access_token');
      const expiresAt = localStorage.getItem('token_expires_at');
      
      if (!token || !expiresAt) return null;
      
      // Check if token is expired (with 5 minute buffer)
      if (Date.now() > (parseInt(expiresAt) - 300000)) {
        this.logout();
        return null;
      }
      
      return token;
    }

    isAuthenticated() {
      return this.getToken() !== null;
    }
  }

  // Initialize auth manager
  window.authManager = new AuthManager();

  document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login-form');
    const loginBtn = document.getElementById('login-btn');
    const loginText = loginBtn.querySelector('.login-text');
    const loginSpinner = loginBtn.querySelector('.login-spinner');
    const loginError = document.getElementById('login-error');

    function showLoading() {
      loginBtn.disabled = true;
      loginText.style.display = 'none';
      loginSpinner.style.display = 'flex';
    }

    function hideLoading() {
      loginBtn.disabled = false;
      loginText.style.display = 'inline';
      loginSpinner.style.display = 'none';
    }

    function showError(message) {
      loginError.textContent = message;
      loginError.style.display = 'block';
    }

    function hideError() {
      loginError.style.display = 'none';
    }

    loginForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      
      hideError();
      showLoading();
      
      try {
        await window.authManager.login(username, password);
        
        // Dispatch login success event
        window.dispatchEvent(new CustomEvent('authLogin'));
        
      } catch (error) {
        showError(error.message);
      } finally {
        hideLoading();
      }
    });
  });
</script>

<style define:vars={{ brandColor: color, brandHover: hover }}>
  .login-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    padding: 2rem;
  }

  .login-form {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(25px);
    padding: 3rem;
    border-radius: 20px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(255, 255, 255, 0.3);
    width: 100%;
    max-width: 420px;
    animation: slideInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(50px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .login-header {
    text-align: center;
    margin-bottom: 2rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .login-logo {
    width: 64px;
    height: 64px;
    margin: 0 auto 1.5rem auto;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: block;
  }

  .login-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #1a1a1a;
    margin-bottom: 0.75rem;
    text-shadow: none;
  }

  .login-subtitle {
    color: #4b5563;
    font-size: 1rem;
    font-weight: 400;
  }

  .login-form-content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }

  .form-group input {
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.4);
    background: rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    color: #1a1a1a;
  }

  .form-group input:focus {
    outline: none;
    border-color: rgba(255, 255, 255, 0.8);
    background: rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
  }

  .form-group input::placeholder {
    color: #6b7280;
  }

  .login-button {
    background: rgba(255, 255, 255, 0.2);
    color: #1a1a1a;
    border: 2px solid rgba(255, 255, 255, 0.4);
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 56px;
    backdrop-filter: blur(10px);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .login-button:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.8);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .login-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .login-spinner {
    display: flex;
    gap: 4px;
    align-items: center;
  }

  .spinner-dot {
    width: 6px;
    height: 6px;
    background: #1a1a1a;
    border-radius: 50%;
    animation: bounce 1s infinite;
  }

  .spinner-dot:nth-child(2) { animation-delay: 0.2s; }
  .spinner-dot:nth-child(3) { animation-delay: 0.4s; }

  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-4px); }
  }

  .login-error {
    background: rgba(254, 242, 242, 0.2);
    border: 1px solid rgba(254, 202, 202, 0.4);
    color: #dc2626;
    padding: 1rem;
    border-radius: 12px;
    font-size: 0.9rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.1);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .login-container {
      padding: 1rem;
    }
    
    .login-form {
      padding: 2rem;
      max-width: 100%;
    }
    
    .login-title {
      font-size: 1.5rem;
    }
    
    .login-subtitle {
      font-size: 0.9rem;
    }
  }

  /* Additional animations and effects */
  .login-form {
    will-change: transform;
  }

  .form-group {
    position: relative;
  }

  .form-group input {
    will-change: transform, box-shadow;
  }
</style>