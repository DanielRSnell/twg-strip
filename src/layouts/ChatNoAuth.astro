---
import "@/styles/prototype.scss";
import { AstroFont } from "astro-font";
import BaseNoHeaderFooter from "@/layouts/BaseNoHeaderFooter.astro";

export interface Props {
    page: {
        color: string;
        hover: string;
        logo: string;
        title: string;
        invitation: string;
        highlight: string;
        create_own: {
            text: string;
            link: string;
            link_text: string;
        };
        start_button: string;
        footer: {
            text: string;
            link: string;
            link_text: string;
        };
        api: {
            endpoint: string;
            headers: {
                'Content-Type': string;
                'Accept': string;
                'X-Request-ID': string;
                'X-API-Key': string;
                'Cookie': string;
            };
            modelSetExtId: string;
        };
    };
}

const { page } = Astro.props;
---

<BaseNoHeaderFooter title={page.title}>
    <style slot="head" set:html={`
        :root {
            --brand-color: ${page.color};
            --brand-hover: ${page.hover};
            --texas-maroon: ${page.color};
            --texas-maroon-hover: ${page.hover};
        }
        
        /* Prose styling for HTML content in bot messages */
        .bot-message {
            line-height: 1.6;
        }
        
        .bot-message p {
            margin: 0.75rem 0;
        }
        
        .bot-message p:first-child {
            margin-top: 0;
        }
        
        .bot-message p:last-child {
            margin-bottom: 0;
        }
        
        .bot-message ul,
        .bot-message ol {
            margin: 0.75rem 0;
            padding-left: 1.5rem;
        }
        
        .bot-message li {
            margin: 0.25rem 0;
        }
        
        .bot-message a {
            color: #2563eb;
            text-decoration: underline;
        }
        
        .bot-message a:hover {
            color: #1d4ed8;
        }
        
        .bot-message strong {
            font-weight: 600;
        }
        
        .bot-message em {
            font-style: italic;
        }
        
        .bot-message code {
            background-color: #f1f5f9;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875em;
        }
        
        .bot-message pre {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            padding: 1rem;
            overflow-x: auto;
            margin: 0.75rem 0;
        }
        
        .bot-message pre code {
            background: none;
            padding: 0;
            font-size: 0.875rem;
        }
        
        .bot-message blockquote {
            border-left: 4px solid #e2e8f0;
            padding-left: 1rem;
            margin: 0.75rem 0;
            font-style: italic;
            color: #64748b;
        }
        
        .bot-message h1,
        .bot-message h2,
        .bot-message h3,
        .bot-message h4,
        .bot-message h5,
        .bot-message h6 {
            font-weight: 600;
            margin: 1rem 0 0.5rem 0;
            line-height: 1.25;
        }
        
        .bot-message h1:first-child,
        .bot-message h2:first-child,
        .bot-message h3:first-child,
        .bot-message h4:first-child,
        .bot-message h5:first-child,
        .bot-message h6:first-child {
            margin-top: 0;
        }
        
        .bot-message hr {
            border: none;
            border-top: 1px solid #e2e8f0;
            margin: 1rem 0;
        }
    `}></style>
    <main>
        <div id="chat-container">
            <!-- Left side of the split layout -->
            <div id="information-screen">
                <!-- Logo area -->
                <div class="logo-container">
                    <div class="logo-box">
                       <img src={page.logo} alt={page.title}>
                    </div>
                </div>
                
                <!-- Invitation text -->
                <div class="title-section">
                    <h2>{page.invitation} <span class="highlight">{page.highlight}</span></h2>
                </div>
                
                <!-- Create your own text -->
                <div class="create-own">
                    <p>{page.create_own.text} <a href={page.create_own.link}>{page.create_own.link_text}</a></p>
                </div>
                
                <!-- Start Conversation button -->
                <div class="start-button">
                    <button id="chat-start">
                        {page.start_button}
                    </button>
                </div>
                
                <!-- Footer -->
                <div class="footer">
                    {page.footer.text} <a href={page.footer.link}>{page.footer.link_text}</a>
                </div>
            </div>
            
            <!-- Right side of the split layout -->
            <div id="chat-screen">
               <!-- Back button for mobile view -->
               <div class="back-button-container">
                   <button id="back-to-info" class="back-button">
                       <span class="back-arrow">‚Üê</span> Back
                   </button>
               </div>
               
               <!-- Chat interface -->
               <div class="chat-wrapper">
                   <div id="chat-messages"></div>
                   <div class="chat-input-container">
                       <input type="text" id="chat-input" placeholder="Type your message...">
                       <button id="send-button">Send</button>
                   </div>
               </div>
            </div>
        </div>
    </main>

    <slot name="body" />
    <script> (function(){ var s = document.createElement('script'); var h = document.querySelector('head') || document.body; s.src = 'https://acsbapp.com/apps/app/dist/js/app.js'; s.async = true; s.onload = function(){ acsbJS.init(); }; h.appendChild(s); })(); </script> 
    <script>
        document.addEventListener("astro:page-load", () => {
            window.acsbJS.restart()
        })
    </script>

    <script define:vars={{ apiConfig: page.api }}>
        document.addEventListener('DOMContentLoaded', function() {
            const chatStart = document.getElementById('chat-start');
            const backToInfo = document.getElementById('back-to-info');
            const informationScreen = document.getElementById('information-screen');
            const chatScreen = document.getElementById('chat-screen');
            const chatMessages = document.getElementById('chat-messages');
            const chatInput = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-button');

            // Add welcome message on page load
            addMessage('Hello! I\'m here to help you learn about ThisWay Global. Feel free to ask me any questions!');

            chatStart.addEventListener('click', function() {
                informationScreen.classList.add('hidden');
                chatScreen.classList.add('active');
            });

            backToInfo.addEventListener('click', function() {
                informationScreen.classList.remove('hidden');
                chatScreen.classList.remove('active');
            });

            function addMessage(content, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
                
                // Check if content contains HTML tags
                const hasHTML = /<[^>]*>/g.test(content);
                
                if (isUser) {
                    // Always use textContent for user messages for security
                    messageDiv.textContent = content;
                } else if (hasHTML) {
                    // Use innerHTML for bot messages with HTML content
                    messageDiv.innerHTML = content;
                } else {
                    // Use textContent for plain text bot messages
                    messageDiv.textContent = content;
                }
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            async function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                addMessage(message, true);
                chatInput.value = '';
                sendButton.disabled = true;
                sendButton.textContent = 'Sending...';

                try {
                    const response = await fetch(apiConfig.endpoint, {
                        method: 'POST',
                        headers: apiConfig.headers,
                        body: JSON.stringify({
                            prompt: message,
                            modelSetExtId: apiConfig.modelSetExtId
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    console.log('API Response:', data); // Debug log
                    
                    // Handle the specific API response structure
                    if (data.response && Array.isArray(data.response) && data.response.length > 0) {
                        const responseText = data.response[0].text;
                        if (responseText) {
                            // Check if response contains HTML tags
                            if (responseText.includes('<') && responseText.includes('>')) {
                                // Create a temporary div to convert HTML to plain text
                                const tempDiv = document.createElement('div');
                                tempDiv.innerHTML = responseText;
                                const plainText = tempDiv.textContent || tempDiv.innerText || '';
                                addMessage(plainText);
                            } else {
                                // Plain text response
                                addMessage(responseText);
                            }
                        } else {
                            addMessage('Empty response received');
                        }
                    } else {
                        addMessage('Invalid response format received');
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    addMessage('Sorry, there was an error processing your message. Please try again.');
                }

                sendButton.disabled = false;
                sendButton.textContent = 'Send';
            }

            sendButton.addEventListener('click', sendMessage);
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        });
    </script>
</BaseNoHeaderFooter>