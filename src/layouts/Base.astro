---
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/partials/Header.astro";
import "@/styles/main.scss";
import { AstroFont } from "astro-font";
import "aos/dist/aos.css";
import "swiper/css";
import Chatbot from '../components/Chatbot.jsx';

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;

let fontPrimary, fontSecondary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;.]+/gi, "");
}
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;.]+/gi, "");
}

// types for frontmatters
export interface Props {
  title?: string;
  meta_title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
}

// destructure frontmatter
const { title, meta_title, description, image, noindex, canonical } =
  Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <!-- theme meta -->
    <meta name="theme-name" content="odfense-astro" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- google font css -->
    <AstroFont
      config={[
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontPrimary!,
          fallback: "sans-serif",
          cssVariable: "font-primary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${pf}&display=swap`,
        },
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontSecondary!,
          fallback: "sans-serif",
          cssVariable: "font-secondary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${sf}&display=swap`,
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- title -->
    <title>
      {plainify(meta_title ? meta_title : title ? title : config.site.title)}
    </title>

    <!-- canonical url -->
    {canonical && <link rel="canonical" href={canonical} item-prop="url" />}

    <!-- noindex robots -->
    {noindex && <meta name="robots" content="noindex,nofollow" />}

    <!-- meta-description -->
    <meta
      name="description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />

    <!-- author from config.json -->
    <meta name="author" content={config.metadata.meta_author} />

    <!-- og-title -->
    <meta
      property="og:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
    />

    <!-- og-description -->
    <meta
      property="og:description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />
    <meta property="og:type" content="website" />
    <meta
      property="og:url"
      content={`${config.site.base_url}/${Astro.url.pathname.replace("/", "")}`}
    />

    <!-- twitter-title -->
    <meta
      name="twitter:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
    />

    <!-- twitter-description -->
    <meta
      name="twitter:description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />

    <!-- og-image -->
    <meta
      property="og:image"
      content={`${config.site.base_url}${image ? image : config.metadata.meta_image}`}
    />

    <!-- twitter-image -->
    <meta
      name="twitter:image"
      content={`${config.site.base_url}${image ? image : config.metadata.meta_image}`}
    />
    <meta name="twitter:card" content="summary_large_image" />
  </head>
  <body>
    <TwSizeIndicator />
    <Header />
    <main id="main-content">
      <slot />
    </main>
    <script>
      import AOS from "aos";

      function aosInit() {
        AOS.init({
          duration: 600,
          once: true,
        });
      }

      aosInit();
      document.addEventListener("astro:after-swap", aosInit);
    </script>
    <script>
		// Document Redirect Script
(function() {
  // Define redirect mapping
  const redirects = {
    "/doc/master-service-agreement": "/wp-content/uploads/2021/03/ThisWay-Global-Master-Subscription-Agreement-FEB-2021.pdf",
    "/doc/master-service-agreement.pdf": "/wp-content/uploads/2021/03/ThisWay-Global-Master-Subscription-Agreement-FEB-2021.pdf"
  };

  // Function to check current URL and redirect if needed
  function checkAndRedirect() {
    const currentPath = window.location.pathname;
    
    // Check if URL contains /doc/
    if (currentPath.includes('/doc/')) {
      // Check if the specific path exists in our redirects map
      if (redirects[currentPath]) {
        // Create and show notification
        const notification = document.createElement('div');
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.left = '50%';
        notification.style.transform = 'translateX(-50%)';
        notification.style.backgroundColor = '#4CAF50';
        notification.style.color = 'white';
        notification.style.padding = '15px';
        notification.style.borderRadius = '5px';
        notification.style.zIndex = '1000';
        notification.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
        notification.textContent = 'Document found! Redirecting you to the document...';
        
        document.body.appendChild(notification);
        
        // Redirect after a short delay to allow user to see the notification
        setTimeout(function() {
          window.location.href = redirects[currentPath];
        }, 2000);
      }
    }
  }
  
  // Run the check when the page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkAndRedirect);
  } else {
    checkAndRedirect();
  }
})();
	</script>
    <Footer />
       <script> (function(){ var s = document.createElement('script'); var h = document.querySelector('head') || document.body; s.src = 'https://acsbapp.com/apps/app/dist/js/app.js'; s.async = true; s.onload = function(){ acsbJS.init(); }; h.appendChild(s); })(); </script> 
  </body>
  
</html>
